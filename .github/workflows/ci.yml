name: CI Test suite

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    # Similar to docker-compose.yml but not the same, ü§∑‚Äç‚ôÇÔ∏è
    services:
      postgres:
        image: postgres:10.14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Ruby version specified in `.ruby-version`
        uses: eregon/use-ruby-action@master # this will use by default the .ruby-version file in your repository

      - name: Install dependent libraries
        run: sudo apt-get install libpq-dev

      - name: Setup cache key and directory for gems cache
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-use-ruby-${{ hashFiles('**/Gemfile.lock') }}

      - name: Install required Node.js version
        uses: actions/setup-node@v1
        with:
          node-version: "v12.16.2"

      - name: Get Yarn cache directory path
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Setup cache key and directory for node_modules cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Bundle install
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Yarn install
        run: yarn --frozen-lockfile

      - name: Create CI related files
        run: |
          cp .github/database.yml.github-actions config/database.yml
      - name: Set up DB
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          RAILS_ENV: test
          NODE_ENV: test
        run: bundle exec rails db:create db:schema:load --trace

      - name: Precompile assets
        env:
          RAILS_ENV: test
          NODE_ENV: test
        run: bundle exec rake assets:precompile

      - name: Run specs
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          RAILS_ENV: test
          NODE_ENV: test
        run: bundle exec rspec
